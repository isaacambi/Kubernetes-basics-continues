ecrets
Motivation
•	Sometimes we want to store sensitive configuration for our apps.
•	There are many approaches how you can achieve that.
•	Most Kubernetes native way is to store this configuration is secret.
•	SECRETS ARE NOT THAT SECRET AS THEY SOUND LIKE.
o	By default secrets are stored as plain text in the etcd.
o	Anyone with pod creation capability can read the secret.
So what is Secret
•	It’s almost the same thing as ConfigMap.
•	It’s kubernetes object. 
•	It helps to split the sensitive app configuration to separate object.
•	Basic Kubernetes secret types
•	generic
•	docker-registry
•	Services basics
Problem
•	How can pods in the cluster communicate with each other?
•	How can be load distributed across nodes of deployment? 
•	Container network interface 
•	Is the magic responsible for communication between pods and containers,
o	You should understand that the communication needs to be routed to a specific container in the pod (more about this later).
•	There are multiple CNI plugins which you can use in the cluster:
o	Canico (microk8s)
o	VPC CNI (EKS)
o	Weave works 
o	Flannel
o	and more 
•	Introducing Services
•	Service is a mechanism in Kubernetes to expose set of pods.
•	Using services you application does not have to adapt to mechanism of randomly assigning IP addresses. 
•	Service is grouping of pods (using selector in most of the time) and set of access rules to those.
•	Kubernetes automatically ads/remove pods to services during their lifecycle.
•	Service dns
•	Now the ip address of the service is stable (its fronting unstable set of ip addresses for pods). 
•	We can assign a valid dns to this address.
•	Now the pods does not need to remember ip addresses.
•	How is the traffic balanced?
•	Kubernetes kube-proxy is responsible for managing the routing of the requests between pods in the service.
•	This routing is handled via iptable rules.
o	This whole thing is very complex for now let’s keep things simple
•	Kubernetes DNS
Why DNS
•	Using dns records instead of ip addresses (even for unchanging services) is useful we never know what the ip address will be and we don’t care.
•	Using the dns records we can also refer to services between namespaces.
•	Query examples from pod:
 
service	searches for service with name service in same namespace as the pod
service.default	searches for service with name service in default namespace
service.default.svc.cluster.local	same as above (cluser.local is default domain name for the cluster)
DNS in Kubernetes
•	In cluster DNS is used by DNS component. 
•	In microk8s and EKS it’s the CoreDNS (you can check pods in kube-system ns).
•	Core dns will update all needed dns record whenever new pod is created/deleted or new service.
•	Pod’s DNS
•	The same way as services got dns also each pod has its own dns record.
•	Remember that this record is closely coupled with the ephemeral pod.
 
pod-ip.namespace.pod.cluster.local	search for pod based on the ip address and namespace locator
pod-ip.service-name.namespace.svc.cluster.local
	searches for pod in given service name in given namespace

NodePort
ClusterIP service
•	So far we were discussing about cluster wide name resolution and pod exposure.
•	Almost all the time we need to access the services also from outside of the cluster (e.g. some framework or API endpoint).
•	So far we covered ClusterIp services.
o	Its a default type if you expose service.
NodePort service
•	We will expose a service through a port on the node.
o	Cluster is made of nodes which are vms.
o	Each vm may have ip address accessible from the internet (e.g. the one we ssh).
o	For each machine we will expose service on one of its ports.
o	This port will serve as a gateway to access the service.
•	NodePort 	
•	Pods can be scheduled on any node.
•	Service is bound to a specific port on each node.




