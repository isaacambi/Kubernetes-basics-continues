ervice Accounts
In Kubernetes, service accounts are a mechanism for providing authentication and authorization 
for applications running within a cluster. They are primarily used by the applications to interact
 with the Kubernetes API server and other cluster resources securely.

Here are some key points about service accounts in Kubernetes:

    Purpose: Service accounts are associated with pods, and they allow pods to authenticate 
themselves to the Kubernetes API server to access resources and perform actions within the cluster.

    Automatic creation: When you create a pod, Kubernetes automatically creates a service account
 for that pod, unless you explicitly specify otherwise.

    Token-based authentication: Service accounts use tokens to authenticate with the Kubernetes API server. 
The API server validates these tokens, authorizing the service account to perform actions based 
on its associated role-based access control (RBAC) permissions.

    Cluster roles and role bindings: To grant specific permissions to service accounts, you can
 use cluster roles and role bindings. Cluster roles define sets of permissions, and role bindings 
associate those roles with specific service accounts or subjects.

    Namespace-level isolation: Service accounts are typically scoped to a specific namespace,
 which provides better isolation and control over permissions within the cluster.

    Securely accessing external resources: Service accounts can also be used to authenticate with
 external services, such as cloud providers, by using secrets like service account key files.

    Managed by Kubernetes: Service account tokens are automatically mounted as secrets into the pods,
 making them accessible to applications running inside the pod without the need for manual configuration.

    Best practices: It's essential to follow security best practices when using service accounts.
 Limit the permissions of a service account to the minimum required for its functionality and avoid 
using default service accounts with elevated privileges.

to create a service account
kubectl get serviceaccount dashboard-sa
kubectl get serviceaccount
to view the objecdt
kubectl describe secret dashboard-sa-token-kbbdm

1. how many Service Accounts exist in the default namespace?
solution
k get serviceaccounts
Ans = 2

2. what is the secret token used by the default service account?
solution
kubectl describe serviceaccount default.
token = none

3. we just deployed the Dashboard application, inspect the deployment. what is the image used by the deployment?
solution
k describe deployment

4. Wait for the deployment to be ready. access the custom-dashboard by clicking on the link to dashboard portal

5. what type of account does the Dashboard app use to query the kubernetes Api 
solution
Service account

6. which account does the Dashboard application use to query the Kubernetes API?
solution
kubectl get po -o yaml
Ans = Default

8. At what location is the Service Account credentials available within the pod? 
solution
var/run/secrets

9. the app needs a serviceaccount with the right permisions to be created to authenticate to kubernetes
. the default serviceaccount has limited access. create a new serviceaccount named dashboard-sa
solution
kubectl create serviceaccount dashboard-sa

10. we just added additional permissions for the newly created dashboard-sa account using RBAC. if you are 
interested checkout the files used to configure RBAC at /var/rbac. we will discuss RBAC in a separate section.

11. Enter the access token in the UI of the dashboard application. click load Dashboard button to load Dashboard
create an authorization token for the newly created service account, copy the generated token and paste it into the token field of the UI. 
to do this run
kubectl create token dashboard-sa
for the dashboard-sa service account, copy the token and paste it in the UI.

12. you should not have to copy and paste the token each time. the Dashboard application is programmed to read them
from the secret mount location. however currently, the default service account is mounted. update the deployment to use the 
newly created serviceaccount
edit the deployment to change the serviceaccount from default to dashboard-sa
solution
kubectl get deployment -o yaml> dashboard.yaml
kubectl get deployment
kubectl delete deployment web-dashboard
vi dashboard.yaml
kubectl apply -f dashboard.yaml


Overall, service accounts play a crucial role in securing and managing access to Kubernetes resources and are an integral part of maintaining a secure and robust cluster environment.

